{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Persona Link","text":"<p>The project's aim is to make a novel step to facilitate digital human industry by making it easier for users to integrate their AI-based agents with any avatar or digital human provider. </p> <p>The main features of the project include:</p> <ol> <li>Interoperability: Provides a standard interface that allows users to seamlessly integrate any AI-based agent with any avatar or digital human provider.</li> <li>Caching: Caching layer that significantly improves performance by storing recurring similar requests and their responses. This means that the system won't have to exert extra computational efforts to process the similar requests from scratch.</li> <li>Personalization: Personalization layer that allows users to customize their avatars or digital humans based on specific preferences or requirements.</li> <li>Front-end Widgets: Front-end widgets that users can incorporate into their websites or applications. These widgets will offer a host of features that will further enhance the user experience.</li> </ol> <p>As an open-source product, this project is built by the community for the community. We're looking for developers, designers, and anyone interested in digital humans and AI to contribute to this exciting project. </p> <p>With your help, we can transform the world of digital humans and create a unique, engaging, and immersive user experience. Please join us as we usher in a new era in digital human technology. Let's make the digital world more interactive and enjoyable.</p>"},{"location":"#our-goals","title":"Our Goals","text":"<ul> <li>Innovation: We aim to revolutionize the digital human industry by offering a unique platform which integrates AI and digital humans.</li> <li>Community: Encourage cooperation and assistance from developers, designers, and anyone with an interest in advancing AI and digital human technology.</li> <li>User-Centered: Propel the industry forward by creating a platform based on the needs of the users, making digital human interaction a seamless experience.</li> <li>Transparency: Foster an open-source community where development is done in plain sight, offering clarity and trust to the users.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Follow the instructions to get a copy of this project up and running on your local machine for development and testing purposes.</p> <ol> <li>Install poetry</li> <li>Ensure you have python 3.10 and above.</li> <li>clone this repository and cd to it.</li> <li>create virtual env <code>python3 -m venv .venv</code></li> <li>activate the env <code>source .venv/bin/activate</code></li> <li>run <code>poetry install</code> to install the dependencies</li> <li>create your <code>.env</code> file based upon the <code>.env.example</code></li> <li>run the server <code>uvicorn server.app:app --port 9000 --reload</code></li> <li>run teh example application <code>uvicorn server.example:app --port 8000 --reload</code></li> <li>run frontend example <code>npm start</code></li> </ol> <p>For more details see <code>server/README.md</code></p>"},{"location":"#licensing","title":"Licensing","text":"<p>This project leverages an open source license. For more details, please check out the LICENSE file.</p>"},{"location":"#contact-information","title":"Contact Information","text":"<p>If you have any questions, comments, or concerns, feel free to contact us. We are open to feedback and are always excited to discuss new ideas!</p> <p>By contributing to Persona Link, you're helping shape the future of digital human technology. Together, we can create new connections and experiences.</p> <p>Thank you for your interest in Persona Link. We can't wait to build the future with you!</p>"},{"location":"Library/avatar/","title":"Avatar","text":""},{"location":"Library/avatar/#persona_link.avatar.models.Avatar","title":"<code>Avatar</code>","text":"<p>               Bases: <code>Model</code></p> <p>A class that represents Avatar data in the database.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the Avatar, managed by the database.</p> <code>name</code> <code>str</code> <p>Name for the Avatar.</p> <code>slug</code> <code>str</code> <p>Auto-generated unique identifier for the Avatar based upon the name.</p> <code>provider</code> <code>str</code> <p>Refers to a registered provider, persona_link.persona_provider.base.PersonaBase.</p> <code>settings</code> <code>dict</code> <p>Settings for the Avatar, specific the provider. The provider shall validate these settings.</p> <code>webhook</code> <code>ForeignKey</code> <p>Refers to implementation of: class:<code>persona_link.avatar.models.Webhook</code>. ForeignKey Webhook that the avatar is assigned to.</p> <code>created_at</code> <code>Datetime</code> <p>The time when the Avatar instance was created in the database.</p> <code>updated_at</code> <code>Datetime</code> <p>The time of the last update of the Avatar instance in the database.</p> <code>initial_message</code> <code>str</code> <p>Initial message the avatar should speak upon first conversation.</p>"},{"location":"Library/avatar/#persona_link.avatar.models.Avatar.create_avatar","title":"<code>create_avatar(data, webhook=None, initial_message=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create an avatar with the given data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>AvatarPydantic</code> <p>The data for the avatar</p> required <code>webhook</code> <code>WebhookPydantic</code> <p>The data for the webhook</p> <code>None</code> <code>initial_message</code> <code>str</code> <p>The initial message for the avatar to speak</p> <code>None</code>"},{"location":"Library/avatar/#persona_link.avatar.models.Avatar.update_avatar","title":"<code>update_avatar(data, webhook=None, initial_message=None)</code>  <code>async</code>","text":"<p>Update the avatar with the given data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>AvatarPydantic</code> <p>The data for the avatar</p> required <code>webhook</code> <code>WebhookPydantic</code> <p>The data for the webhook</p> <code>None</code> <code>initial_message</code> <code>str</code> <p>The initial message for the avatar to speak</p> <code>None</code>"},{"location":"Library/avatar/#persona_link.avatar.models.AvatarInput","title":"<code>AvatarInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class that represents the input to the Avatar from the application backend.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Text to be spoken by the Avatar.</p> <code>personalize</code> <code>bool</code> <p>Whether to personalize the Avatar.</p>"},{"location":"Library/avatar/#persona_link.avatar.models.AvatarPydantic","title":"<code>AvatarPydantic</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pydantic model for the Avatar class for creating an avatar.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name for the Avatar.</p> <code>provider</code> <code>str</code> <p>Name of the registered provider (persona_link.persona_provider.base.PersonaBase).</p> <code>settings</code> <code>dict</code> <p>Settings for the Avatar, specific the provider. The provider shall validate these settings.</p>"},{"location":"Library/avatar/#persona_link.avatar.models.Webhook","title":"<code>Webhook</code>","text":"<p>               Bases: <code>Model</code></p> <p>A class to represent webhook in the database</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the Webhook, managed by the database.</p> <code>url</code> <code>str</code> <p>URL of the webhook.</p> <code>headers</code> <code>dict</code> <p>Headers for the webhook.</p> <code>method</code> <code>str</code> <p>Method of the webhook.</p> <code>get_text</code> <code>bool</code> <p>Whether to get text from the webhook.</p> <code>get_audio</code> <code>bool</code> <p>Whether to get audio from the webhook.</p> <code>get_video</code> <code>bool</code> <p>Whether to get video from the webhook.</p> <code>video_width</code> <code>int</code> <p>Width of the video.</p> <code>video_height</code> <code>int</code> <p>Height of the video.</p> <code>video_frame_rate</code> <code>int</code> <p>Frame rate of the video.</p> <code>audio_bit_rate</code> <code>int</code> <p>Bit rate of the audio.</p> <code>audio_sampling_rate</code> <code>int</code> <p>Sampling rate of the audio.</p> <code>created_at</code> <code>Datetime</code> <p>The time when the Webhook instance was created in the database.</p> <code>updated_at</code> <code>Datetime</code> <p>The time of the last update of the Webhook instance in the database.</p>"},{"location":"Library/avatar/#persona_link.avatar.models.WebhookPydantic","title":"<code>WebhookPydantic</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A pydantic model for the Webhook class for creating a webhook.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>URL of the webhook.</p> <code>headers</code> <code>dict</code> <p>Headers for the webhook.</p> <code>method</code> <code>str</code> <p>Method of the webhook.</p> <code>get_text</code> <code>bool</code> <p>Whether to get text from the webhook.</p> <code>get_audio</code> <code>bool</code> <p>Whether to get audio from the webhook.</p> <code>get_video</code> <code>bool</code> <p>Whether to get video from the webhook.</p> <code>video_width</code> <code>int</code> <p>Width of the video.</p> <code>video_height</code> <code>int</code> <p>Height of the video.</p> <code>video_frame_rate</code> <code>int</code> <p>Frame rate of the video.</p> <code>audio_bit_rate</code> <code>int</code> <p>Bit rate of the audio.</p> <code>audio_sampling_rate</code> <code>int</code> <p>Sampling rate of the audio.</p>"},{"location":"Library/avatar/#persona_link.avatar.models.WebhookResponseData","title":"<code>WebhookResponseData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class that represents the data to be sent to the webhook when a user speaks or messages from the frontend.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>Optional[str]</code> <p>Text spoken by the Avatar.</p> <code>media_url</code> <code>Optional[str]</code> <p>URL of the media file.</p> <code>media_type</code> <code>Optional[AvatarType]</code> <p>Type of the media file.</p> <code>conversation_id</code> <code>str</code> <p>ID that the source will use to determine conversation details.</p>"},{"location":"Library/avatar/#persona_link.avatar.utils.call_webhook","title":"<code>call_webhook(avatar_slug, data)</code>  <code>async</code>","text":"<p>Call the webhook of the avatar with the given slug.  The calling app must handle the request and take appropriate action</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to use</p> required <code>data</code> <code>WebhookResponseData</code> <p>The data to send to the webhook</p> required"},{"location":"Library/avatar/#persona_link.avatar.utils.get_avatar_info","title":"<code>get_avatar_info(avatar_slug)</code>  <code>async</code>","text":"<p>Get the avatar with the given slug</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to get</p> required <p>Returns:</p> Type Description <code>Avatar</code> <p>A tuple with the following values: Avatar: The avatar with the given slug AvatarType: The type of the avatar</p>"},{"location":"Library/avatar/#persona_link.avatar.utils.speak","title":"<code>speak(avatar_slug, cache, input)</code>  <code>async</code>","text":"<p>Speak the input text using the avatar with the given slug</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to use</p> required <code>cache</code> <code>Cache</code> <p>The cache object to use</p> required <code>input</code> <code>AvatarInput</code> <p>The input text to speak</p> required <p>Returns:</p> Name Type Description <code>SpeakingAvatarInstance</code> <code>SpeakingAvatarInstance</code> <p>The instance of the speaking avatar</p>"},{"location":"Library/cache/","title":"Cache","text":"<p>Hash methods that can be used to hash data.</p>"},{"location":"Library/cache/#persona_link.cache.cache.Cache","title":"<code>Cache</code>","text":"<p>Class for caching of Avatar video / audio as per the avatar type. Caching requires a blob storage for files, database for metadata, and a hashing method to generate unique keys for the data.</p>"},{"location":"Library/cache/#persona_link.cache.cache.Cache.__init__","title":"<code>__init__(storage, db, hashFn)</code>","text":"<p>Constructor for Cache class.</p> <p>Parameters:</p> Name Type Description Default <code>storage</code> <code>BaseCacheStorage</code> <p>The storage for the cache</p> required <code>db</code> <code>BaseCacheDB</code> <p>The database for the cache</p> required <code>hashFn</code> <code>Callable[[Any], str]</code> <p>The hashing function to generate keys</p> required"},{"location":"Library/cache/#persona_link.cache.cache.Cache.delete","title":"<code>delete(key)</code>  <code>async</code>","text":"<p>Delete the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/cache/#persona_link.cache.cache.Cache.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>async</code>","text":"<p>Delete all the records for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/cache/#persona_link.cache.cache.Cache.get","title":"<code>get(avatarId, text)</code>  <code>async</code>","text":"<p>Get the record from the cache</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required <code>text</code> <code>str</code> <p>The text to get the record for</p> required <p>Returns:</p> Type Description <code>Optional[Record]</code> <p>The record for the given avatar ID and text</p>"},{"location":"Library/cache/#persona_link.cache.cache.Cache.getUsageCount","title":"<code>getUsageCount(key)</code>  <code>async</code>","text":"<p>Get the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required <p>Returns:</p> Type Description <code>int</code> <p>The usage count for the given key</p>"},{"location":"Library/cache/#persona_link.cache.cache.Cache.get_urls","title":"<code>get_urls(record)</code>  <code>async</code>","text":"<p>Get the URLs for the media, visemes, and word timestamps</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The record to get the URLs for</p> required <p>Returns:</p> Type Description <code>Urls</code> <p>The URLs for the media, visemes, and word timestamps</p>"},{"location":"Library/cache/#persona_link.cache.cache.Cache.incrementUsage","title":"<code>incrementUsage(key)</code>  <code>async</code>","text":"<p>Increment the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/cache/#persona_link.cache.cache.Cache.put","title":"<code>put(avatarId, text, data)</code>  <code>async</code>","text":"<p>Put the record in the cache</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required <code>text</code> <code>str</code> <p>The text to put the record for</p> required <code>data</code> <code>DataToStore</code> <p>The data to store in the cache</p> required <p>Returns:</p> Type Description <code>Record</code> <p>The record that was put in the cache</p>"},{"location":"Library/cache/#persona_link.cache.models.ContentType","title":"<code>ContentType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the content type of the data to be stored</p> <p>Attributes:</p> Name Type Description <code>MP4</code> <code>str</code> <p>MP4 video content type</p> <code>MP3</code> <code>str</code> <p>MP3 audio content type</p> <code>WAV</code> <code>str</code> <p>WAV audio content type</p> <code>WEBM</code> <code>str</code> <p>WEBM video content type</p> <code>JSON</code> <code>str</code> <p>JSON metadata content type</p>"},{"location":"Library/cache/#persona_link.cache.models.DataToStore","title":"<code>DataToStore</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the data to be stored in the cache</p> <p>Attributes:</p> Name Type Description <code>data_type</code> <code>AvatarType</code> <p>Type of the data</p> <code>binary_data</code> <code>bytes | AsyncGenerator[bytes, None]</code> <p>Binary data to be stored</p> <code>content_type</code> <code>ContentType</code> <p>Content type of the data</p> <code>visemes</code> <code>Optional[List[Viseme]]</code> <p>Visemes for the data</p> <code>word_timestamps</code> <code>Optional[List[WordTimestamp]]</code> <p>Word timestamps for the data</p> <code>metadata</code> <code>Optional[Metadata]</code> <p>Metadata for the data</p>"},{"location":"Library/cache/#persona_link.cache.models.PathType","title":"<code>PathType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the type of path</p> <p>Attributes:</p> Name Type Description <code>MEDIA</code> <code>str</code> <p>Media path</p> <code>VISEMES</code> <code>str</code> <p>Visemes path</p> <code>WORD_TIMESTAMPS</code> <code>str</code> <p>Word timestamps path</p>"},{"location":"Library/cache/#persona_link.cache.models.Record","title":"<code>Record</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A single cache record in the database</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>unique key (also filename) for the file stored in storage.</p> <code>avatarId</code> <code>str</code> <p>unique key for the avatar, also the folder in storage</p> <code>text</code> <code>str</code> <p>text to be converted to audio/video</p> <code>storage_paths</code> <code>StoragePaths</code> <p>paths where the media and related files are stored</p> <code>created</code> <code>datetime</code> <p>timestamp when the record was created</p> <code>updated</code> <code>Optional[datetime]</code> <p>timestamp of the last update of the record</p> <code>metadata</code> <code>Optional[Metadata]</code> <p>metadata about the record</p>"},{"location":"Library/cache/#persona_link.cache.models.StoragePaths","title":"<code>StoragePaths</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the storage paths of the data</p> <p>Attributes:</p> Name Type Description <code>media_path</code> <code>str</code> <p>Media path</p> <code>viseme_path</code> <code>Optional[str]</code> <p>Visemes path</p> <code>word_timestamp_path</code> <code>Optional[str]</code> <p>Word timestamps path</p>"},{"location":"Library/cache/#persona_link.cache.models.UsageLog","title":"<code>UsageLog</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A log of usage of a cache record</p> <p>Attributes:</p> Name Type Description <code>record_key</code> <code>str</code> <p>the key of the record for which the usage is logged</p> <code>timestamp</code> <code>datetime</code> <p>timestamp of the usage</p>"},{"location":"Library/cache/#persona_link.cache.hashing.md5hash","title":"<code>md5hash(data)</code>","text":"<p>Generate an MD5 hash for the given data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>any</code> <p>The data to hash</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The MD5 hash of the data</p>"},{"location":"Library/cache/#persona_link.cache.hashing.sha256hash","title":"<code>sha256hash(data)</code>","text":"<p>Generate a SHA256 hash for the given data</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>any</code> <p>The data to hash</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The SHA256 hash of the data</p>"},{"location":"Library/database/","title":"Database","text":""},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB","title":"<code>BaseCacheDB</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for database to store metadata of the cached files</p>"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.delete","title":"<code>delete(key)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Delete the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Delete all the records for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.get","title":"<code>get(key)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Get the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.getUsageCount","title":"<code>getUsageCount(key)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Get the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.incrementUsage","title":"<code>incrementUsage(key)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Increment the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.base_db.BaseCacheDB.put","title":"<code>put(record)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Put the record in the database</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The record to put in the database</p> required"},{"location":"Library/database/#persona_link.cache.db.models.Record","title":"<code>Record</code>","text":"<p>               Bases: <code>Model</code></p> <p>A single cache record in the database</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the record, managed by the database.</p> <code>key</code> <code>str</code> <p>unique key (also filename) for the file stored in storage.</p> <code>avatarId</code> <code>str</code> <p>unique key for the avatar, also the folder in storage</p> <code>text</code> <code>str</code> <p>text to be converted to audio/video</p> <code>storage_paths</code> <code>dict</code> <p>paths where the media and related files are stored</p> <code>created</code> <code>datetime</code> <p>timestamp when the record was created</p> <code>updated</code> <code>datetime</code> <p>timestamp of the last update of the record</p> <code>metadata</code> <code>dict</code> <p>metadata about the record</p>"},{"location":"Library/database/#persona_link.cache.db.models.UsageLog","title":"<code>UsageLog</code>","text":"<p>               Bases: <code>Model</code></p> <p>A log of usage of a cache record</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary key for the log, managed by the database.</p> <code>record</code> <code>Record</code> <p>the record for which the usage is logged</p> <code>timestamp</code> <code>datetime</code> <p>timestamp of the usage</p>"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB","title":"<code>RelationalDB</code>","text":"<p>               Bases: <code>BaseCacheDB</code></p> <p>Relational DB implementation of the BaseCacheDB. Should work with most Relation DB that Tortoise ORM supports.</p>"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.delete","title":"<code>delete(key)</code>  <code>async</code>","text":"<p>Delete the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>async</code>","text":"<p>Delete all the records for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.get","title":"<code>get(key)</code>  <code>async</code>","text":"<p>Get the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.getUsageCount","title":"<code>getUsageCount(key)</code>  <code>async</code>","text":"<p>Get the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.incrementUsage","title":"<code>incrementUsage(key)</code>  <code>async</code>","text":"<p>Increment the usage count of the record for the given key</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the record</p> required"},{"location":"Library/database/#persona_link.cache.db.relational.RelationalDB.put","title":"<code>put(record)</code>  <code>async</code>","text":"<p>Put the record in the database</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The record to put in the database</p> required"},{"location":"Library/getting_started/","title":"Getting Started","text":"<p>Install the persona_link library in your project using Github</p> <pre><code>poetry add git+https://github.com/enligence/persona-link.git@persona_link\n</code></pre> <p>Create appropriate env vars in <code>.env</code> as suggested in <code>.env.example</code></p> <p>See Getting started with server to use persona link on your system.</p>"},{"location":"Library/persona_provider/","title":"Persona Provider","text":""},{"location":"Library/persona_provider/#persona_link.persona_provider.base.PersonaBase","title":"<code>PersonaBase</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for persona provider. A persona provider is the one responsible to take some text and settings and generate the corresponding audio or video.</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.base.PersonaBase.generate","title":"<code>generate(text, settings)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Generate the audio or video for the avatar</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the avatar</p> required <code>settings</code> <code>AudioProviderSettings | VideoProviderSettings</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>DataToStore</code> <p>The data to store for the audio or video along with other metadata</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.base.PersonaBase.speak","title":"<code>speak(cache, avatar_id, text, settings)</code>  <code>async</code>","text":"<p>Speak the input text using the avatar with the given slug</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>Cache</code> <p>The cache object to use</p> required <code>avatar_id</code> <code>str</code> <p>The avatar ID</p> required <code>text</code> <code>str</code> <p>The input text to speak</p> required <code>settings</code> <code>AudioProviderSettings | VideoProviderSettings</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>SpeakingAvatarInstance</code> <p>details of rendered avatar instance</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.base.PersonaBase.validate","title":"<code>validate(settings)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>AudioProviderSettings | VideoProviderSettings | None</code> <p>settings of respective provider if the settings are valid otherwise None</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AudioFormat","title":"<code>AudioFormat</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for the audio format</p> <p>Attributes:</p> Name Type Description <code>MP3</code> <code>str</code> <p>MP3 format</p> <code>WAV</code> <code>str</code> <p>WAV format</p> <code>OPUS</code> <code>str</code> <p>OPUS format</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AudioInstance","title":"<code>AudioInstance</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the audio instance</p> <p>Attributes:</p> Name Type Description <code>duration_seconds</code> <code>Optional[float]</code> <p>Duration of the audio in seconds</p> <code>streaming</code> <code>bool</code> <p>Whether to stream the audio</p> <code>content</code> <code>bytes | AsyncGenerator[bytes, None]</code> <p>Content of the audio</p> <code>visemes</code> <code>Optional[List[Viseme]]</code> <p>List of visemes</p> <code>word_timestamps</code> <code>Optional[List[WordTimestamp]]</code> <p>List of word timestamps</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AudioProviderSettings","title":"<code>AudioProviderSettings</code>","text":"<p>               Bases: <code>CommonAudioSettings</code>, <code>ABC</code></p> <p>A class to represent the audio provider settings</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <code>str</code> <p>Name of the provider</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AudioProviderSettings.get_provider","title":"<code>get_provider(settings)</code>  <code>classmethod</code>","text":"<p>Get the provider for the settings</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>Optional[AudioProviderSettings]</code> <p>Audio provider settings object for the provider</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AudioProviderSettings.validate","title":"<code>validate(settings)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>Optional[AudioProviderSettings]</code> <p>Audio provider settings object for the provider</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.AvatarType","title":"<code>AvatarType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the type of avatar</p> <p>Attributes:</p> Name Type Description <code>AUDIO</code> <code>str</code> <p>Audio avatar</p> <code>VIDEO</code> <code>str</code> <p>Video avatar</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.CommonAudioSettings","title":"<code>CommonAudioSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the common settings for the audio</p> <p>Attributes:</p> Name Type Description <code>visemes</code> <code>bool</code> <p>Whether to include visemes, default is False</p> <code>word_timestamps</code> <code>bool</code> <p>Whether to include word timestamps, default is False</p> <code>streaming</code> <code>bool</code> <p>Whether to stream the audio, default is False</p> <code>sampling_rate_hz</code> <code>int</code> <p>Sampling rate of the audio in Hz, default is 16000</p> <code>bit_rate_kbps</code> <code>int</code> <p>Bit rate of the audio in kbps, default is 32</p> <code>audio_format</code> <code>AudioFormat</code> <p>Format of the audio, default is MP3</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.CommonVideoSettings","title":"<code>CommonVideoSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the common settings for the video</p> <p>Attributes:</p> Name Type Description <code>word_timestamps</code> <code>bool</code> <p>Whether to include word timestamps, default is False</p> <code>streaming</code> <code>bool</code> <p>Whether to stream the video, default is False</p> <code>frame_rate</code> <code>int</code> <p>Frame rate of the video, default is 30</p> <code>width</code> <code>int</code> <p>Width of the video, default is 640</p> <code>height</code> <code>int</code> <p>Height of the video, default is 480</p> <code>video_format</code> <code>VideoFormat</code> <p>Format of the video, default is MP4</p> <code>video_codec</code> <code>VideoCodecs</code> <p>Codec of the video, default is HEVC</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.Metadata","title":"<code>Metadata</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the metadata of the cached files</p> <p>Attributes:</p> Name Type Description <code>duration_seconds</code> <code>Optional[float]</code> <p>Duration of the media in seconds</p> <code>sampling_rate_hz</code> <code>Optional[int]</code> <p>Sampling rate of the media in Hz</p> <code>bit_rate_kbps</code> <code>Optional[int]</code> <p>Bit rate of the media in kbps</p> <code>frame_rate</code> <code>Optional[int]</code> <p>Frame rate of the video</p> <code>width</code> <code>Optional[int]</code> <p>Width of the video</p> <code>height</code> <code>Optional[int]</code> <p>Height of the video</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.SpeakingAvatarInstance","title":"<code>SpeakingAvatarInstance</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the instance of the speaking avatar</p> <p>Attributes:</p> Name Type Description <code>avatar_type</code> <code>AvatarType</code> <p>Type of the avatar</p> <code>urls</code> <code>Urls</code> <p>URLs of the cached files</p> <code>metadata</code> <code>Optional[Metadata]</code> <p>Metadata of the cached files</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.Urls","title":"<code>Urls</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the urls for the cached files</p> <p>Attributes:</p> Name Type Description <code>media_url</code> <code>str</code> <p>URL of the media</p> <code>visemes_url</code> <code>Optional[str]</code> <p>URL of the visemes</p> <code>word_timestamps_url</code> <code>Optional[str]</code> <p>URL of the word timestamps</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.VideoCodecs","title":"<code>VideoCodecs</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the video codecs</p> <p>Attributes:</p> Name Type Description <code>VP9</code> <code>str</code> <p>VP9 codec</p> <code>H264</code> <code>str</code> <p>H264 codec</p> <code>HEVC</code> <code>str</code> <p>HEVC codec</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.VideoFormat","title":"<code>VideoFormat</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for the video format</p> <p>Attributes:</p> Name Type Description <code>MP4</code> <code>str</code> <p>MP4 format</p> <code>WEBM</code> <code>str</code> <p>WEBM format</p> <code>OGG</code> <code>str</code> <p>OGG format</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.VideoProviderSettings","title":"<code>VideoProviderSettings</code>","text":"<p>               Bases: <code>CommonVideoSettings</code>, <code>ABC</code></p> <p>A class to represent the video provider settings</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <code>str</code> <p>Name of the provider</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.VideoProviderSettings.validate","title":"<code>validate(settings)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>Optional[VideoProviderSettings]</code> <p>Video provider settings object for the provider</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.Viseme","title":"<code>Viseme</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the viseme</p> <p>Attributes:</p> Name Type Description <code>offset</code> <code>int</code> <p>Offset in milliseconds</p> <code>viseme</code> <code>int</code> <p>Viseme id as in https://learn.microsoft.com/en-us/azure/ai-services/speech-service/how-to-speech-synthesis-viseme?tabs=visemeid&amp;pivots=programming-language-python#map-phonemes-to-visemes</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.models.WordTimestamp","title":"<code>WordTimestamp</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to store the word timestamp</p> <p>Attributes:</p> Name Type Description <code>word</code> <code>str</code> <p>Word spoken</p> <code>offset</code> <code>int</code> <p>Offset in milliseconds</p> <code>duration</code> <code>int</code> <p>Duration in milliseconds</p> <code>text_offset</code> <code>int</code> <p>Offset in text</p> <code>word_length</code> <code>int</code> <p>Length of the word spoken</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.models.AzureAvatarPose","title":"<code>AzureAvatarPose</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the pose of the Azure Avatar</p> <p>Attributes:</p> Name Type Description <code>SITTING</code> <p>str Sitting pose</p> <code>STANDING</code> <p>str Standing pose</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.models.AzureAvatarSettings","title":"<code>AzureAvatarSettings</code>","text":"<p>               Bases: <code>VideoProviderSettings</code></p> <p>Settings for Azure Avatar Provider. Refer to azure for more information.</p> <p>Attributes:</p> Name Type Description <code>voice</code> <p>str Voice of the Avatar.</p> <code>character</code> <p>str Character of the Avatar.</p> <code>style</code> <p>AzureAvatarStyle Style of the Avatar.</p> <code>pose</code> <p>AzureAvatarPose Pose of the Avatar.</p> <code>background_color</code> <p>str Color of the background.</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.models.AzureAvatarSettings.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validates the settings passed in</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings to validate</p> required <p>Returns:     Validated azure avatar settings or None if validation fails</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.models.AzureAvatarStyle","title":"<code>AzureAvatarStyle</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the style of the Azure Avatar</p> <p>Attributes:</p> Name Type Description <code>GRACEFUL</code> <p>str Graceful style</p> <code>CASUAL</code> <p>str Casual style</p> <code>TECHNICAL</code> <p>str Technical style</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.azure_avatar.AzureAvatar","title":"<code>AzureAvatar</code>","text":"<p>               Bases: <code>PersonaBase</code></p> <p>Azure avatar provider for generating video avatars</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.azure_avatar.AzureAvatar.generate","title":"<code>generate(text, settings)</code>  <code>async</code>","text":"<p>Generate the avatar for the given text and settings</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the avatar</p> required <code>settings</code> <code>AzureAvatarSettings</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>SpeakingAvatarInstance | None</code> <p>Details of rendered avatar if successful, None otherwise</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.azure.azure_avatar.AzureAvatar.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <p>dict The settings for the provider</p> required <p>Returns:</p> Type Description <code>AzureAvatarSettings | None</code> <p>AzureAvatarSettings | None</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.heygen.models.HeygenAvatarSettings","title":"<code>HeygenAvatarSettings</code>","text":"<p>               Bases: <code>VideoProviderSettings</code></p> <p>Settings for Heygen Avatar Provider. Refer to heygen for more information.</p> <p>Attributes:</p> Name Type Description <code>heygen_id</code> <code>str</code> <p>Heygen ID of the Avatar.</p> <code>avatar_style</code> <code>str</code> <p>Style of the Avatar.</p> <code>voice_id</code> <code>str</code> <p>ID of the voice.</p> <code>background_color</code> <code>str</code> <p>Color of the background.</p> <code>background_type</code> <code>str</code> <p>Type of the background.</p> <code>background_asset_id</code> <code>str</code> <p>ID of the background asset.</p> <code>test</code> <code>bool</code> <p>Whether to test the Avatar.</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.heygen.models.HeygenAvatarSettings.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validates the settings passed in</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings to validate</p> required <p>Returns:</p> Type Description <code>Optional[HeygenAvatarSettings]</code> <p>The settings for the Heygen Avatar Provider if the settings are valid, None otherwise</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.heygen.heygen_avatar.HeygenAvatar","title":"<code>HeygenAvatar</code>","text":"<p>               Bases: <code>PersonaBase</code></p> <p>Heygen video avatar provider.</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.heygen.heygen_avatar.HeygenAvatar.generate","title":"<code>generate(text, settings)</code>  <code>async</code>","text":"<p>Generate the video for the avatar</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the avatar</p> required <code>settings</code> <code>HeygenAvatarSettings</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>SpeakingAvatarInstance</code> <p>Rendered video details if successful, None otherwise</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.heygen.heygen_avatar.HeygenAvatar.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>HeygenAvatarSettings | None</code> <p>Video avatar settings for heygen provider if the settings are valid, None otherwise</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.sprite.sprite_avatar.SpriteAvatar","title":"<code>SpriteAvatar</code>","text":"<p>               Bases: <code>PersonaBase</code></p> <p>Sprite Avatar takes a series of images as a sprite image where each sub image in the reel represent a visual lip position as illustrated here</p> <p>The provider will generate the audio and the visemes for the avatar such that the frontend can play the audio and animate the avatar based on the visemes.</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.sprite.sprite_avatar.SpriteAvatar.generate","title":"<code>generate(text, settings)</code>  <code>async</code>","text":"<p>Generate the audio and visemes for the sprite avatar</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to be spoken by the avatar</p> required <code>settings</code> <code>SpriteAvatarSettings</code> <p>The settings for the sprite provider</p> required <p>Returns:</p> Type Description <code>DataToStore</code> <p>the data to store for the audio, visemes and/or word timestamps along with other metadata</p>"},{"location":"Library/persona_provider/#persona_link.persona_provider.sprite.sprite_avatar.SpriteAvatar.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return the settings object if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Type Description <code>SpriteAvatarSettings</code> <p>audio provider settings if the settings are valid otherwise None</p>"},{"location":"Library/persona_provider/#persona_link.tts.base.TTSBase","title":"<code>TTSBase</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"Library/persona_provider/#persona_link.tts.base.TTSBase.synthesize_speech","title":"<code>synthesize_speech(text, settings)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Get the audio bytes for the given text with max 300 words if settings have visemes set, then return visemes array too.</p> <p>TODO: Alternatively, we can also include a text transformer that may generate SSML  for text to make it more accurately being spoken. Most cloud models are trained well to handle many scenarios but certain scientific  and challenging terminologies may still be incorrectly spoken.</p>"},{"location":"Library/persona_provider/#persona_link.tts.factory.tts_factory","title":"<code>tts_factory(settings)</code>","text":"<p>Factory method to get the TTS provider</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>AudioProviderSettings</code> <p>The settings for the TTS provider</p> required <p>Returns:</p> Name Type Description <code>TTSBase</code> <code>TTSBase</code> <p>The TTS provider instance</p>"},{"location":"Library/persona_provider/#persona_link.tts.azure.models.AzureTTSVoiceSettings","title":"<code>AzureTTSVoiceSettings</code>","text":"<p>               Bases: <code>AudioProviderSettings</code></p> <p>Settings for Azure TTS Voice Provider.</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <code>str) </code> <p>Name of the provider - must be azure</p> <code>subscription_key</code> <code>str) </code> <p>Subscription key for the Azure service</p> <code>region</code> <code>str) </code> <p>Region for the Azure service</p> <code>name</code> <code>str) </code> <p>Name of the voice</p> <code>language</code> <code>str) </code> <p>Language of the voice</p>"},{"location":"Library/persona_provider/#persona_link.tts.azure.models.AzureTTSVoiceSettings.validate","title":"<code>validate(settings)</code>  <code>classmethod</code>","text":"<p>Validate the settings for the provider. This method should return True if the settings are valid</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>The settings for the provider</p> required <p>Returns:</p> Name Type Description <code>AudioProviderSettings</code> <code>AudioProviderSettings</code> <p>The validated settings</p>"},{"location":"Library/persona_provider/#persona_link.tts.azure.azure_tts.AzureTTS","title":"<code>AzureTTS</code>","text":"<p>               Bases: <code>TTSBase</code></p> <p>Azure TTS provider</p>"},{"location":"Library/persona_provider/#persona_link.tts.azure.azure_tts.AzureTTS.synthesize_speech","title":"<code>synthesize_speech(text, settings)</code>  <code>async</code>","text":"<p>Get the audio bytes for the given text</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to synthesize</p> required <code>settings</code> <code>AzureTTSVoiceSettings</code> <p>The settings for the Azure TTS</p> required <p>Returns:</p> Name Type Description <code>AudioInstance</code> <code>AudioInstance</code> <p>The audio instance</p>"},{"location":"Library/storage/","title":"Storage","text":"<p>Local storage for cache</p> <p>Azure storage for cache</p>"},{"location":"Library/storage/#persona_link.cache.storage.base_storage.BaseCacheStorage","title":"<code>BaseCacheStorage</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for storage of video/audio files. Storage can be file system,  cloud storage, etc. The storage will store files in avatarId/file format. This way it will be possible to delete all files for a given persona_link.</p>"},{"location":"Library/storage/#persona_link.cache.storage.base_storage.BaseCacheStorage.delete","title":"<code>delete(path)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Delete the data from the given path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path of the file in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.base_storage.BaseCacheStorage.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Delete all the data for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/storage/#persona_link.cache.storage.base_storage.BaseCacheStorage.get","title":"<code>get(path)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Get the url for the given path</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path of the file in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.base_storage.BaseCacheStorage.put","title":"<code>put(avatarId, data, filename, content_type)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Put the file in the avatarId folder and return the path</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required <code>data</code> <code>bytes | AsyncGenerator[bytes, None]</code> <p>The data to store</p> required <code>filename</code> <code>str</code> <p>The filename of the file</p> required <code>content_type</code> <code>ContentType</code> <p>The content type of the file</p> required"},{"location":"Library/storage/#persona_link.cache.storage.local_storage.LocalStorage","title":"<code>LocalStorage</code>","text":"<p>               Bases: <code>BaseCacheStorage</code></p> <p>Local storage for cache Requires ENV vars to be set for the path to the storage</p>"},{"location":"Library/storage/#persona_link.cache.storage.local_storage.LocalStorage.delete","title":"<code>delete(path)</code>  <code>async</code>","text":"<p>Delete the file from the storage</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.local_storage.LocalStorage.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>async</code>","text":"<p>Delete all the files for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/storage/#persona_link.cache.storage.local_storage.LocalStorage.get","title":"<code>get(path)</code>  <code>async</code>","text":"<p>Get the data from the storage</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.local_storage.LocalStorage.put","title":"<code>put(avatarId, data, filename, content_type)</code>  <code>async</code>","text":"<p>Put the data in the storage</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required <code>data</code> <code>bytes</code> <p>The data to be stored</p> required <code>filename</code> <code>str</code> <p>The name of the file</p> required <code>content_type</code> <code>ContentType</code> <p>The content type of the data</p> required"},{"location":"Library/storage/#persona_link.cache.storage.azure_storage.AzureStorage","title":"<code>AzureStorage</code>","text":"<p>               Bases: <code>BaseCacheStorage</code></p> <p>Azure storage for cache. Requires ENV vars to be set for connection string and container name</p>"},{"location":"Library/storage/#persona_link.cache.storage.azure_storage.AzureStorage.delete","title":"<code>delete(path)</code>  <code>async</code>","text":"<p>Delete the data from the storage</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the data in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.azure_storage.AzureStorage.deleteAll","title":"<code>deleteAll(avatarId)</code>  <code>async</code>","text":"<p>Delete all the data for the given avatar</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required"},{"location":"Library/storage/#persona_link.cache.storage.azure_storage.AzureStorage.get","title":"<code>get(path)</code>  <code>async</code>","text":"<p>Get the data from the storage</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the data in the storage</p> required"},{"location":"Library/storage/#persona_link.cache.storage.azure_storage.AzureStorage.put","title":"<code>put(avatarId, data, filename, content_type)</code>  <code>async</code>","text":"<p>Put the data in the storage</p> <p>Parameters:</p> Name Type Description Default <code>avatarId</code> <code>str</code> <p>The avatar ID</p> required <code>data</code> <code>bytes</code> <p>The data to store</p> required <code>filename</code> <code>str</code> <p>The filename to store the data as</p> required <code>content_type</code> <code>ContentType</code> <p>The content type of the data</p> required"},{"location":"Library/utilities/","title":"Utils","text":""},{"location":"Library/utilities/#persona_link.api_client.APIClient","title":"<code>APIClient</code>","text":"<p>Singleton class for the API Client to make api requests using async functions</p>"},{"location":"Library/utilities/#persona_link.api_client.APIClient.download","title":"<code>download(url)</code>  <code>async</code>","text":"<p>Download the content from the given URL</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to download the content from</p> required <p>Returns:</p> Type Description <code>AsyncGenerator[bytes, None]</code> <p>The content of the response as async stream of bytes</p>"},{"location":"Library/utilities/#persona_link.api_client.APIClient.get_request","title":"<code>get_request(url, headers=None)</code>  <code>async</code>","text":"<p>Make a GET request to the given URL with the given headers</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to make the request to</p> required <code>headers</code> <code>dict</code> <p>The headers to send with the request</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>The response of the request as json</p>"},{"location":"Library/utilities/#persona_link.api_client.APIClient.post_request","title":"<code>post_request(url, headers=None, payload=None, response_format='json')</code>  <code>async</code>","text":"<p>Make a POST request to the given URL with the given headers and payload</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to make the request to</p> required <code>headers</code> <code>dict</code> <p>The headers to send with the request</p> <code>None</code> <code>payload</code> <code>dict</code> <p>The payload to send with the request</p> <code>None</code> <code>response_format</code> <code>str</code> <p>The format of the response. Default is \"json\"</p> <code>'json'</code> <p>Returns:</p> Type Description <code>dict</code> <p>The response of the request as json</p>"},{"location":"Library/utilities/#persona_link.api_client.APIClient.put_request","title":"<code>put_request(url, headers=None, payload=None)</code>  <code>async</code>","text":"<p>Make a PUT request to the given URL with the given headers and payload</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to make the request to</p> required <code>headers</code> <code>dict</code> <p>The headers to send with the request</p> <code>None</code> <code>payload</code> <code>dict</code> <p>The payload to send with the request</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>The response of the request as json</p>"},{"location":"Server/getting_started/","title":"Getting Started","text":"<p>You can either clone and run the server locally and connect your application, or directly use the persona link library by connecting your chat routes appropriately. </p> <p>This server and example will offer basic guidelines.</p>"},{"location":"Server/getting_started/#running-the-server","title":"Running the server","text":"<p>Assuming:</p> <ul> <li>a virtual env is created and you have done <code>poetry install</code> so all necessary dependencies are present.</li> <li>you are in persona_link folder (parent to the server folder).</li> <li>a <code>.env</code> is created as per <code>.env.example</code> filling all detains of providers you intend to use.</li> </ul> <p>Run server</p> <pre><code>uvicorn server.app:app --port 9000 --reload\n</code></pre> <p>Run example application</p> <pre><code>uvicorn server.example:app --port 8000 --reload\n</code></pre> <p>Run the frontend example</p> <pre><code>To Be Filled\n</code></pre> <p>Now open <code>http://localhost:3000</code> in a browser and try it out!</p>"},{"location":"Server/models/","title":"API Models","text":""},{"location":"Server/models/#server.models.AvatarListModel","title":"<code>AvatarListModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for a single Avatar in the list of Avatars when returned in bulk</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the Avatar</p> <code>slug</code> <code>str</code> <p>Slug of the Avatar</p> <code>provider</code> <code>str</code> <p>Provider of the Avatar</p>"},{"location":"Server/models/#server.models.ConnectedAvatar","title":"<code>ConnectedAvatar</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for an Avatar connected to the application backend using a webhook</p> <p>Attributes:</p> Name Type Description <code>avatar_settings</code> <code>Optional[AvatarPydantic]</code> <p>Settings of the Avatar. Defaults to None.</p> <code>webhook_settings</code> <code>Optional[WebhookPydantic]</code> <p>Settings of the Webhook. Defaults to None.</p> <code>initial_message</code> <code>Optional[str]</code> <p>Initial message for Avatar to speak. Defaults to None.</p>"},{"location":"Server/models/#server.models.Conversation","title":"<code>Conversation</code>","text":"<p>               Bases: <code>Model</code></p> <p>Model for a conversation</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary Key</p> <code>conversation_id</code> <code>str</code> <p>Conversation id</p> <code>avatar_slug</code> <code>str</code> <p>Avatar slug</p> <code>created_at</code> <code>datetime</code> <p>Creation timestamp</p> <code>updated_at</code> <code>datetime</code> <p>Last update timestamp</p>"},{"location":"Server/models/#server.models.ConversationAvatar","title":"<code>ConversationAvatar</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the avatar in a conversation</p> <p>Attributes:</p> Name Type Description <code>avatar_type</code> <code>AvatarType</code> <p>Type of avatar</p> <code>avatar_slug</code> <code>str</code> <p>Avatar slug</p> <code>avatar_name</code> <code>str</code> <p>Avatar name</p> <code>avatar_provider_name</code> <code>str</code> <p>Avatar provider name</p>"},{"location":"Server/models/#server.models.ConversationMessage","title":"<code>ConversationMessage</code>","text":"<p>               Bases: <code>Model</code></p> <p>Model for a message in a conversation</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary Key</p> <code>conversation</code> <code>ForeignKeyField</code> <p>Conversation to which the message belongs</p> <code>message</code> <code>ForeignKeyField</code> <p>Message in the conversation</p> <code>order</code> <code>int</code> <p>Order in which messages appear in the conversation</p>"},{"location":"Server/models/#server.models.Feedback","title":"<code>Feedback</code>","text":"<p>               Bases: <code>Model</code></p> <p>Model for feedback on a message ( server.models.Message )</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>ForeignKeyField</code> <p>Message for which feedback is given</p> <code>feedback_thumb</code> <code>BooleanField</code> <p>thumbs up(true) or thumbs down(false) for the interaction</p> <code>feedback_text</code> <code>TextField</code> <p>detailed feedback on the interaction</p> <code>updated_at</code> <code>DatetimeField</code> <p>Last update timestamp</p>"},{"location":"Server/models/#server.models.FeedbackPydantic","title":"<code>FeedbackPydantic</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model for feedback on a message for API</p> <p>Attributes:</p> Name Type Description <code>feedback_thumb</code> <code>bool</code> <p>thumbs up(true) or thumbs down(false) for the interaction</p> <code>feedback_text</code> <code>str</code> <p>detailed feedback on the interaction</p>"},{"location":"Server/models/#server.models.Message","title":"<code>Message</code>","text":"<p>               Bases: <code>Model</code></p> <p>Model for a message</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Primary Key</p> <code>persona_type</code> <code>PersonaType</code> <p>Type of persona</p> <code>text</code> <code>str</code> <p>text of message</p> <code>media_url</code> <code>str</code> <p>media url or audio or video</p> <code>visemes_url</code> <code>str</code> <p>visemes url from agent</p> <code>word_timestamps_url</code> <code>str</code> <p>word timestamps url from agent</p> <code>metadata</code> <code>dict</code> <p>metadata for the message</p> <code>media_type</code> <code>AvatarType</code> <p>type of media</p> <code>created_at</code> <code>datetime</code> <p>Creation timestamp</p>"},{"location":"Server/models/#server.models.MessagePydantic","title":"<code>MessagePydantic</code>","text":"<p>               Bases: <code>pydantic_model_creator(Message, name='MessagePydantic')</code></p> <p>Pydantic model for a message</p> <p>Attributes:</p> Name Type Description <code>persona_type</code> <code>PersonaType</code> <p>Type of persona</p> <code>text</code> <code>str</code> <p>text of message</p> <code>media_url</code> <code>str</code> <p>media url or audio or video</p> <code>visemes_url</code> <code>str</code> <p>visemes url from agent</p> <code>word_timestamps_url</code> <code>str</code> <p>word timestamps url from agent</p> <code>metadata</code> <code>dict</code> <p>metadata for the message</p> <code>media_type</code> <code>AvatarType</code> <p>type of media</p> <code>created_at</code> <code>datetime</code> <p>Creation timestamp</p>"},{"location":"Server/models/#server.models.PersonaType","title":"<code>PersonaType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for the type of persona</p> <p>Attributes:</p> Name Type Description <code>AGENT</code> <code>str</code> <p>Agent persona</p> <code>HUMAN</code> <code>str</code> <p>Human persona</p>"},{"location":"Server/routes/","title":"API Endpoints","text":"<p>Example server to create and manage avatars.  Actual implementation my involve more complex logic, validation, security measures, and handling multiple tenants.</p>"},{"location":"Server/routes/#server.app.avatarify","title":"<code>avatarify(avatar_slug, input)</code>  <code>async</code>","text":"<p>Generate the avatar for the given input</p> <p>route: <code>/avatar/{avatar_slug}/generate/</code> method: POST</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to use</p> required <code>input</code> <code>AvatarInput</code> <p>The input text to speak</p> required <p>Returns:</p> Name Type Description <code>SpeakingAvatarInstance</code> <code>SpeakingAvatarInstance</code> <p>The instance of the speaking avatar</p>"},{"location":"Server/routes/#server.app.converse","title":"<code>converse(conversation_id, input)</code>  <code>async</code>","text":"<p>Converse in the conversation. This will speak the input text and send it to the conversation websocket connection</p> <p>route: <code>/conversation/{conversation_id}/</code> method: POST</p> <p>Parameters:</p> Name Type Description Default <code>conversation_id</code> <code>str</code> <p>The ID of the conversation</p> required <code>input</code> <code>AvatarInput</code> <p>The input text to speak</p> required"},{"location":"Server/routes/#server.app.create_avatar","title":"<code>create_avatar(data)</code>  <code>async</code>","text":"<p>Create a new avatar</p> <p>route: <code>/avatar/</code> method: PUT</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ConnectedAvatar</code> <p>The data for the new avatar</p> required <p>Returns:</p> Name Type Description <code>Avatar</code> <code>AvatarPydantic</code> <p>The created avatar</p>"},{"location":"Server/routes/#server.app.create_conversation","title":"<code>create_conversation(avatar_slug)</code>  <code>async</code>","text":"<p>Create a new conversation</p> <p>route: <code>/conversation/{avatar_slug}/</code> method: PUT</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to use</p> required <p>Returns:</p> Name Type Description <code>Conversation</code> <code>Conversation</code> <p>The created conversation</p>"},{"location":"Server/routes/#server.app.delete_avatar","title":"<code>delete_avatar(avatar_slug)</code>  <code>async</code>","text":"<p>Delete the avatar with the given slug</p> <p>route: <code>/avatar/{avatar_slug}/</code> method: DELETE</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to delete</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The status of the deletion</p>"},{"location":"Server/routes/#server.app.feedback","title":"<code>feedback(message_id, feedback)</code>  <code>async</code>","text":"<p>Provide feedback for the message</p> <p>route: <code>/feedback/{message_id}</code> method: POST</p> <p>Parameters:</p> Name Type Description Default <code>message_id</code> <code>int</code> <p>The ID of the message</p> required <code>feedback</code> <code>FeedbackPydantic</code> <p>The feedback data</p> required <p>Returns:</p> Name Type Description <code>Feedback</code> <code>FeedbackPydantic</code> <p>The feedback object</p>"},{"location":"Server/routes/#server.app.get_conversation_avatar","title":"<code>get_conversation_avatar(conversation_id)</code>  <code>async</code>","text":"<p>Get the avatar for the conversation</p> <p>route: <code>/conversation/{conversation_id}/</code> method: GET</p> <p>Parameters:</p> Name Type Description Default <code>conversation_id</code> <code>str</code> <p>The ID of the conversation</p> required <p>Returns:</p> Name Type Description <code>ConversationAvatar</code> <code>ConversationAvatar</code> <p>The avatar for the conversation</p>"},{"location":"Server/routes/#server.app.list_avatars","title":"<code>list_avatars()</code>  <code>async</code>","text":"<p>List all the avatars</p> <p>route : <code>/avatars/</code> method: GET</p> <p>Returns: List[ AvatarListModel ]: List of all avatars server.models.AvatarListModel</p>"},{"location":"Server/routes/#server.app.list_messages","title":"<code>list_messages(conversation_id)</code>  <code>async</code>","text":"<p>List all the messages in the conversation</p> <p>route: <code>/conversation/{conversation_id}/messages/</code> method: GET</p> <p>Parameters:</p> Name Type Description Default <code>conversation_id</code> <code>str</code> <p>The ID of the conversation</p> required <p>Returns:</p> Type Description <code>List[MessagePydantic]</code> <p>List[ MessagePydantic ]: List of all messages in the conversation</p>"},{"location":"Server/routes/#server.app.update_avatar","title":"<code>update_avatar(avatar_slug, data)</code>  <code>async</code>","text":"<p>Update the avatar with the given slug</p> <p>route: <code>/avatar/{avatar_slug}/</code> method: POST</p> <p>Parameters:</p> Name Type Description Default <code>avatar_slug</code> <code>str</code> <p>The slug of the avatar to update</p> required <code>data</code> <code>ConnectedAvatar</code> <p>The updated data for the avatar</p> required <p>Returns:</p> Name Type Description <code>Avatar</code> <code>AvatarPydantic</code> <p>The updated avatar</p>"},{"location":"Server/routes/#server.ws.websocket_endpoint","title":"<code>websocket_endpoint(websocket, conversation_id)</code>  <code>async</code>","text":"<p>This endpoint is used to establish a websocket connection for a conversation.</p> <p>route: <code>/ws/{conversation_id}</code> method: WebSocket</p> <p>Parameters:</p> Name Type Description Default <code>websocket</code> <code>WebSocket</code> <p>The websocket connection</p> required <code>conversation_id</code> <code>str</code> <p>The ID of the conversation</p> required"},{"location":"persona-link-widgets/","title":"Frontend Widgets for Persona Link","text":"<p>Interaction is 2-way and thus to offer full potential of the goals of this project, the project includes front-end widgets that connect to the persona-link server. Each widget must provide:</p>"},{"location":"persona-link-widgets/#react-components-for-supporting-interactive-avatars","title":"React components for supporting interactive avatars","text":"<p>Persona link is a project where an AI agent can be linked to a persona.  A persona is full duplex i.e. it can not only speak but also listen.</p> <p>We have 2 types of personas</p> <ol> <li>Video based like from HeyGen D-iD etc.</li> <li>Audio based that will give audio and at least visemes (visual lip positions with timestamps)</li> </ol> <p>In future we can add text based too for full set of features.</p> <p>Any avatar component will connect with the backend api and get the avatar details for that id. The backend will be secured by ensuring that only allowed domains can request. The backend will give the necessary details like avatar type and other rendering related info e.g. whether it should collect user's video, audio or text. What should be the background etc. Whether interaction should be hands free, what gestures are allowed etc.</p> <p>Based upon the avatar type it will load appropriate reach sub component, e.g. for a  video based avatar, it will simply be playing a video from a url. However for a audio based sprite avatar it will play the sprite images in sequence of the given visemes. If text has to be displayed too and highlighted as it is being spoken, then the work timestamps returned can also be used.</p> <p>Based upon the settings, it will display text, record ot mic buttons. For hands free it will have appropriate UX and so on.</p> <p>This components will play the avatar as the backend requests (connection via a web socket) at the same time it will stream, audio, video or text. For a hands free mode (only for audio/video), when there is a pause of 2 sec, we can assume that user is done speaking and avatar can respond. We can also do fancier things later, about using LLMs to determine context of whether user is done or not and have avatar respond with fillers like \"hmm\". \"i see\", \"carry on\" etc.</p> <p>When user is done, the backend will either process the response or call a webhook for the calling app that is utilizing the avatar services. The app will have the logic to process the user's input and produce a response. It will ask the avatar to speak.</p>"},{"location":"persona-link-widgets/getting_started/","title":"React Widget","text":""},{"location":"persona-link-widgets/getting_started/#installation","title":"Installation","text":"<p>To install the widget, do the following:</p> <ol> <li><code>npm i avatar-widgets</code></li> <li>Before using the avatar-widget please make sure that your backend example server must be serving on 8000 port</li> <li>After that import the widget into your React component: <code>import Avatarwidget from 'avatar-widgets';</code></li> <li>Then, you can use it in your component's render method like:</li> </ol> <pre><code>render() {\n  return (\n\n      &lt;Avatarwidget message=\"nice to meet you mr. john\" /&gt;\n\n  );\n}\n</code></pre>"}]}